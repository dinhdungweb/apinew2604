const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

/**
 * Ki·ªÉm tra c·∫£nh b√°o h·ªá th·ªëng
 */
async function checkAlerts() {
  try {
    console.log('\n===== KI·ªÇM TRA C·∫¢NH B√ÅO H·ªÜ TH·ªêNG =====');
    
    // L·∫•y c·∫£nh b√°o l·ªói g·∫ßn nh·∫•t
    const lastErrorAlert = await prisma.setting.findUnique({
      where: { key: 'last_sync_error_alert' }
    });
    
    // L·∫•y th√¥ng tin hi·ªáu su·∫•t g·∫ßn nh·∫•t
    const lastSyncPerformance = await prisma.setting.findUnique({
      where: { key: 'last_sync_performance' }
    });
    
    // L·∫•y tr·∫°ng th√°i worker
    const workerStatus = await prisma.setting.findUnique({
      where: { key: 'worker_status' }
    });
    
    // Hi·ªÉn th·ªã c·∫£nh b√°o l·ªói
    if (lastErrorAlert && lastErrorAlert.value) {
      try {
        const alertData = JSON.parse(lastErrorAlert.value);
        const alertTime = new Date(alertData.timestamp);
        const now = new Date();
        const minutesAgo = Math.floor((now - alertTime) / (1000 * 60));
        
        console.log('\n=== C·∫¢NH B√ÅO G·∫¶N NH·∫§T ===');
        console.log(`Th·ªùi gian: ${alertTime.toLocaleString()} (c√°ch ƒë√¢y ${minutesAgo} ph√∫t)`);
        console.log(`N·ªôi dung: ${alertData.message}`);
        console.log(`S·ªë l·ªói: ${alertData.errorCount}`);
        
        // Ki·ªÉm tra c·∫£nh b√°o c√≥ qu√° c≈© kh√¥ng (> 1 gi·ªù)
        if (minutesAgo > 60) {
          console.log('\n‚úÖ Kh√¥ng c√≥ c·∫£nh b√°o m·ªõi trong v√≤ng 1 gi·ªù qua.');
        } else {
          console.log('\n‚ö†Ô∏è C√≥ c·∫£nh b√°o trong v√≤ng 1 gi·ªù qua. C·∫ßn ki·ªÉm tra h·ªá th·ªëng!');
        }
      } catch (e) {
        console.error(`L·ªói khi ph√¢n t√≠ch d·ªØ li·ªáu c·∫£nh b√°o: ${e.message}`);
      }
    } else {
      console.log('\n‚úÖ Ch∆∞a c√≥ c·∫£nh b√°o n√†o ƒë∆∞·ª£c ghi nh·∫≠n.');
    }
    
    // Hi·ªÉn th·ªã hi·ªáu su·∫•t g·∫ßn nh·∫•t
    if (lastSyncPerformance && lastSyncPerformance.value) {
      try {
        const perfData = JSON.parse(lastSyncPerformance.value);
        
        console.log('\n=== HI·ªÜU SU·∫§T G·∫¶N NH·∫§T ===');
        if (perfData.totalTime) {
          console.log(`T·ªïng th·ªùi gian: ${perfData.totalTime}ms`);
        }
        if (perfData.totalItems) {
          console.log(`S·ªë l∆∞·ª£ng s·∫£n ph·∫©m: ${perfData.totalItems}`);
        }
        if (perfData.avgBatchTime) {
          console.log(`Th·ªùi gian trung b√¨nh/batch: ${perfData.avgBatchTime}ms`);
        }
        
        // Ph√¢n t√≠ch hi·ªáu su·∫•t
        if (perfData.totalTime && perfData.totalItems) {
          const avgItemTime = perfData.totalTime / perfData.totalItems;
          console.log(`Th·ªùi gian trung b√¨nh/s·∫£n ph·∫©m: ${avgItemTime.toFixed(2)}ms`);
          
          if (avgItemTime > 1500) {
            console.log('‚ö†Ô∏è Hi·ªáu su·∫•t x·ª≠ l√Ω s·∫£n ph·∫©m th·∫•p. C√≥ th·ªÉ c·∫ßn t·ªëi ∆∞u h√≥a.');
          } else {
            console.log('‚úÖ Hi·ªáu su·∫•t x·ª≠ l√Ω s·∫£n ph·∫©m ·ªïn ƒë·ªãnh.');
          }
        }
      } catch (e) {
        console.error(`L·ªói khi ph√¢n t√≠ch d·ªØ li·ªáu hi·ªáu su·∫•t: ${e.message}`);
      }
    }
    
    // Hi·ªÉn th·ªã tr·∫°ng th√°i worker
    if (workerStatus && workerStatus.value) {
      try {
        const status = JSON.parse(workerStatus.value);
        
        console.log('\n=== TR·∫†NG TH√ÅI WORKER ===');
        console.log(`Tr·∫°ng th√°i: ${status.isRunning ? 'üü¢ ƒêang ch·∫°y' : 'üî¥ ƒê√£ d·ª´ng'}`);
        
        if (status.lastCheckTime) {
          const lastCheck = new Date(status.lastCheckTime);
          const now = new Date();
          const minutesAgo = Math.floor((now - lastCheck) / (1000 * 60));
          
          console.log(`Ki·ªÉm tra cu·ªëi: ${lastCheck.toLocaleString()} (c√°ch ƒë√¢y ${minutesAgo} ph√∫t)`);
          
          if (minutesAgo > 10) {
            console.log('‚ö†Ô∏è Worker kh√¥ng ho·∫°t ƒë·ªông trong 10 ph√∫t qua. C√≥ th·ªÉ c·∫ßn kh·ªüi ƒë·ªông l·∫°i.');
          } else {
            console.log('‚úÖ Worker ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.');
          }
        }
        
        if (status.pendingJobs !== undefined) {
          console.log(`T√°c v·ª• ƒëang ch·ªù: ${status.pendingJobs}`);
        }
        if (status.activeJobs !== undefined) {
          console.log(`T√°c v·ª• ƒëang x·ª≠ l√Ω: ${status.activeJobs}`);
        }
      } catch (e) {
        console.error(`L·ªói khi ph√¢n t√≠ch d·ªØ li·ªáu tr·∫°ng th√°i worker: ${e.message}`);
      }
    }
    
    // L·∫•y th·ªëng k√™ t√°c v·ª•
    const taskCount = await prisma.syncLog.count();
    const pendingTaskCount = await prisma.syncLog.count({
      where: {
        status: 'pending'
      }
    });
    const processingTaskCount = await prisma.syncLog.count({
      where: {
        status: 'processing'
      }
    });
    const errorTaskCount = await prisma.syncLog.count({
      where: {
        status: 'error'
      }
    });
    
    console.log('\n=== TH·ªêNG K√ä T√ÅC V·ª§ ===');
    console.log(`T·ªïng s·ªë t√°c v·ª•: ${taskCount}`);
    console.log(`ƒêang ch·ªù: ${pendingTaskCount}`);
    console.log(`ƒêang x·ª≠ l√Ω: ${processingTaskCount}`);
    console.log(`L·ªói: ${errorTaskCount}`);
    
    if (processingTaskCount > 0) {
      // Ki·ªÉm tra xem c√≥ t√°c v·ª• b·ªã treo kh√¥ng
      const fiveMinutesAgo = new Date();
      fiveMinutesAgo.setMinutes(fiveMinutesAgo.getMinutes() - 5);
      
      const stuckTasks = await prisma.syncLog.findMany({
        where: {
          status: 'processing',
          createdAt: {
            lt: fiveMinutesAgo
          }
        },
        take: 5
      });
      
      if (stuckTasks.length > 0) {
        console.log('\n‚ö†Ô∏è Ph√°t hi·ªán t√°c v·ª• c√≥ th·ªÉ b·ªã treo (ƒëang x·ª≠ l√Ω > 5 ph√∫t):');
        stuckTasks.forEach(task => {
          console.log(`- ID: ${task.id}, ${task.action}, T·∫°o l√∫c: ${task.createdAt.toLocaleString()}`);
        });
      }
    }
    
    console.log('\n===== K·∫æT TH√öC KI·ªÇM TRA =====');
  } catch (error) {
    console.error('L·ªói khi ki·ªÉm tra c·∫£nh b√°o:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Th·ª±c thi
checkAlerts();