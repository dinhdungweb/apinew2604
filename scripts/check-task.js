const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

/**
 * L·∫•y th√¥ng tin v√† tr·∫°ng th√°i c·ªßa task
 * @param {number|string} taskId - ID c·ªßa task c·∫ßn ki·ªÉm tra
 * @returns {Promise<object>} - K·∫øt qu·∫£ ki·ªÉm tra
 */
async function getTaskStatus(taskId) {
  try {
    // Chuy·ªÉn ƒë·ªïi taskId sang s·ªë nguy√™n n·∫øu c·∫ßn
    const numericTaskId = parseInt(taskId, 10);
    if (isNaN(numericTaskId)) {
      throw new Error('Task ID ph·∫£i l√† m·ªôt s·ªë nguy√™n');
    }

    console.log(`ƒêang ki·ªÉm tra task v·ªõi ID: ${numericTaskId}`);

    // Truy v·∫•n th√¥ng tin task t·ª´ CSDL
    const task = await prisma.syncLog.findUnique({
      where: {
        id: numericTaskId
      }
    });

    if (!task) {
      throw new Error(`Kh√¥ng t√¨m th·∫•y task v·ªõi ID: ${numericTaskId}`);
    }

    // In th√¥ng tin task
    console.log('\n=== TH√îNG TIN TASK ===');
    console.log(`ID: ${task.id}`);
    console.log(`H√†nh ƒë·ªông: ${task.action}`);
    console.log(`Tr·∫°ng th√°i: ${task.status || 'Ch∆∞a c√≥ tr·∫°ng th√°i'}`);
    console.log(`Th√¥ng b√°o: ${task.message || 'N/A'}`);
    console.log(`T·∫°o b·ªüi: ${task.createdBy || 'N/A'}`);
    console.log(`Th·ªùi gian t·∫°o: ${task.createdAt}`);
    
    // Ph√¢n t√≠ch details n·∫øu c√≥
    if (task.details) {
      try {
        const details = JSON.parse(task.details);
        console.log('\n=== CHI TI·∫æT TASK ===');
        console.log(JSON.stringify(details, null, 2));
      } catch (e) {
        console.log('\n=== CHI TI·∫æT TASK (raw) ===');
        console.log(task.details);
      }
    }

    await printTaskSummary();
    return { task };
  } catch (error) {
    console.error(`L·ªói: ${error.message}`);
    throw error;
  }
}

/**
 * Hi·ªÉn th·ªã t√≥m t·∫Øt c√°c task
 */
async function printTaskSummary() {
  try {
    // L·∫•y s·ªë l∆∞·ª£ng task theo tr·∫°ng th√°i
    const taskCounts = await prisma.syncLog.groupBy({
      by: ['status'],
      _count: {
        status: true
      }
    });

    // T·∫°o b·∫£n t√≥m t·∫Øt
    const summary = {
      total: 0,
      completed: 0,
      processing: 0,
      pending: 0,
      failed: 0,
      skipped: 0
    };

    taskCounts.forEach(item => {
      const count = item._count.status;
      summary.total += count;
      
      switch(item.status) {
        case 'completed':
          summary.completed = count;
          break;
        case 'processing':
          summary.processing = count;
          break;
        case 'pending':
          summary.pending = count;
          break;
        case 'failed':
          summary.failed = count;
          break;
        case 'skipped':
          summary.skipped = count;
          break;
      }
    });

    // In b·∫£n t√≥m t·∫Øt
    console.log('\n=== T√ìM T·∫ÆT TASK ===');
    console.log(`T·ªïng s·ªë: ${summary.total}`);
    console.log(`Ho√†n th√†nh: ${summary.completed}`);
    console.log(`ƒêang x·ª≠ l√Ω: ${summary.processing}`);
    console.log(`ƒêang ch·ªù: ${summary.pending}`);
    console.log(`Th·∫•t b·∫°i: ${summary.failed}`);
    console.log(`B·ªè qua: ${summary.skipped}`);

    return summary;
  } catch (error) {
    console.error(`L·ªói khi l·∫•y t√≥m t·∫Øt task: ${error.message}`);
    return null;
  }
}

/**
 * Li·ªát k√™ c√°c task m·ªõi nh·∫•t
 * @param {number} limit - S·ªë l∆∞·ª£ng task c·∫ßn li·ªát k√™
 */
async function listLatestTasks(limit = 10) {
  try {
    const tasks = await prisma.syncLog.findMany({
      orderBy: {
        createdAt: 'desc'
      },
      take: limit
    });

    console.log(`\n=== ${limit} TASK M·ªöI NH·∫§T ===`);
    
    if (tasks.length === 0) {
      console.log('Kh√¥ng t√¨m th·∫•y task n√†o');
      return;
    }

    tasks.forEach(task => {
      const statusEmoji = getStatusEmoji(task.status);
      console.log(`${statusEmoji} ID: ${task.id} | ${task.action} | ${task.status || 'N/A'} | ${task.message || 'N/A'} | ${formatDate(task.createdAt)}`);
    });
    
    console.log(`\nƒê·ªÉ xem chi ti·∫øt m·ªôt task, s·ª≠ d·ª•ng: node check-task.js <task_id>`);
  } catch (error) {
    console.error(`L·ªói khi li·ªát k√™ task: ${error.message}`);
  }
}

/**
 * L·∫•y emoji t∆∞∆°ng ·ª©ng v·ªõi tr·∫°ng th√°i
 */
function getStatusEmoji(status) {
  switch(status) {
    case 'completed': return '‚úÖ';
    case 'processing': return 'üîÑ';
    case 'pending': return '‚è≥';
    case 'failed': return '‚ùå';
    case 'skipped': return '‚è≠Ô∏è';
    default: return '‚ùì';
  }
}

/**
 * Format date ƒë·ªÉ hi·ªÉn th·ªã
 */
function formatDate(date) {
  if (!date) return 'N/A';
  const d = new Date(date);
  return d.toLocaleString();
}

/**
 * H√†m ch√≠nh
 */
async function main() {
  try {
    const taskId = process.argv[2];
    const limit = process.argv[3] || 10;
    
    if (!taskId) {
      console.log('Kh√¥ng c√≥ ID task ƒë∆∞·ª£c cung c·∫•p. Hi·ªÉn th·ªã c√°c task m·ªõi nh·∫•t...');
      await printTaskSummary();
      await listLatestTasks(parseInt(limit, 10));
    } else {
      await getTaskStatus(taskId);
    }
    
    process.exit(0);
  } catch (error) {
    console.error(`L·ªói khi th·ª±c thi: ${error.message}`);
    console.error(`Stack trace: ${error.stack}`);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Th·ª±c thi h√†m ch√≠nh
main(); 